generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  posts         Post[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("accounts")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verifications")
}

model Post {
  id         String   @id @default(uuid())
  title      String
  imageCover String?
  slug       String
  content    String
  published  Boolean  @default(false)
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([slug])
  @@map("posts")
}

// model Category {
//   id    String @id @default(uuid())
//   name  String
//   posts Post[]

//   @@unique([name])
//   @@map("categories")
// }

// model Tag {
//   id    String @id @default(uuid())
//   name  String
//   posts Post[]

//   @@unique([name])
//   @@map("tags")
// }

// model Comment {
//   id        String   @id @default(uuid())
//   content   String
//   post      Post     @relation(fields: [postId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt
//   postId    String
//   userId    String?

//   @@map("comments")
// }
